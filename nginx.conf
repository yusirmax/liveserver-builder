user  nginx;
worker_processes  1;
 
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
 
pid        /var/run/nginx.pid;
 
 
events {
    worker_connections  1024;
}
 
 
http {
    include       mime.types;
    default_type  application/octet-stream;
 
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
 
    access_log  /var/log/nginx/access.log  main;
 
    sendfile        on;
    #tcp_nopush     on;
    
    keepalive_timeout  65;
    
    #gzip  on;
    
    include ./conf.d/*.conf;
 
}
 
rtmp {
    server {
        # 监听端口
        listen 8888;
        chunk_size 2048;
 
        # HLS
        # For HLS to work please create a directory in tmpfs (/tmp/hls here)
        # for the fragments. The directory contents is served via HTTP (see
        # http{} section in config)
        #
        # Incoming stream must be in H264/AAC. For iPhones use baseline H264
        # profile (see ffmpeg example).
        # This example creates RTMP stream from movie ready for HLS:
        #
        # ffmpeg -loglevel verbose -re -i movie.avi  -vcodec libx264
        #    -vprofile baseline -acodec libmp3lame -ar 44100 -ac 1
        #    -f flv rtmp://localhost:1935/hls/movie
        #
        # If you need to transcode live stream use 'exec' feature.
        #
 
        # rtmp推流请求路径
        application hls {
            # 开启实时
            live on;
 
            # 开启hls
            hls on;
 
            # 对视频切片进行保护，这样就不会产生马赛克了
            wait_key on; 
 
            # rtmp推流请求路径，文件存放路径
            hls_path /data/video/hls;
 
            # 每个TS文件包含视频内容的长度
            hls_fragment 2s;
 
            # 总共可以回看的事件
            hls_playlist_length 60s;
 
            # 连续模式
            hls_continuous on;
 
            # 对多余的切片进行删除
            hls_cleanup on;
 
            # 嵌套模式
            hls_nested on;
        }
    }
}